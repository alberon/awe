################################################################################
 Contributing
################################################################################

.. highlight:: bash

.. only:: html

    .. contents::
        :local:


================================================================================
 Introduction
================================================================================

To submit a simple documentation change, simply `edit the appropriate file on GitHub <https://github.com/alberon/awe/tree/master/docs>`_.

.. note::

    Not all markup is supported by GitHub -- e.g. ``:ref:`` and ``::doc::`` -- so the preview may not be exactly what appears in the online documentation. If you're making substantial changes, clone the repository and follow the :ref:`instructions below <documentation-build>` to test it first.

If you want to submit a bug fix, the information below should help you to get started. Push your changes to a new branch on GitHub, then open a `pull request <https://github.com/alberon/awe/pulls>`_.

If you want to suggest a new feature, I recommend opening an `issue <https://github.com/alberon/awe/issues>`_ to discuss the idea first, to make sure it will be accepted. (Or you can go ahead and develop it first if you prefer!)


================================================================================
 System requirements
================================================================================

First make sure your system meets the main :ref:`system requirements <requirements>`.

In addition, you will need:


----------------------------------------
 Grunt (CLI)
----------------------------------------

To check if it's installed::

    grunt --version

To install it::

    $ sudo npm install -g grunt-cli


----------------------------------------
 Python & Sphinx
----------------------------------------

The documentation is generated by `Sphinx <http://sphinx-doc.org/>`_, which is written in `Python <https://www.python.org/>`_ and installed with `pip <https://pypi.python.org/pypi/pip>`_. I also recommend using `virtualenv <http://virtualenv.readthedocs.org/en/latest/>`_ to create an isolated environment for installing packages, though this is optional.

To check if they're installed, run::

    $ python --version
    $ pip --version
    $ virtualenvwrapper
    $ sphinx-build --version


Installing Python & pip on Debian
.................................

.. code-block:: bash

    $ sudo apt-get install python-pip


Installing virtualenvwrapper on Debian
......................................

.. code-block:: bash

    $ sudo pip install virtualenvwrapper
    $ source /usr/local/bin/virtualenvwrapper_lazy.sh

You should also add this code to your ``.bashrc`` file to load it automatically in the future::

    if [ -f /usr/local/bin/virtualenvwrapper_lazy.sh ]; then
        source /usr/local/bin/virtualenvwrapper_lazy.sh
    fi


Creating a virtual environment
..............................

.. code-block:: bash

    $ mkvirtualenv awe

Then in future sessions you can switch back to that environment before running ``grunt``::

    $ workon awe


Installing Sphinx
.................

.. code-block:: bash

    $ pip install -r requirements.txt

.. warning::

    Grunt will fail to run if Sphinx is not installed. (It could be modified to skip the documentation build instead, but I don't want to encourage you not to update the documentation!)


----------------------------------------
 LaTeX (optional)
----------------------------------------

To build the PDF documentation, you will also need LaTeX installed. To check::

    pdflatex --version


Installing LaTeX on Debian
..........................

.. code-block:: bash

    $ sudo apt-get install texlive-full

.. note::

    The ``texlive-full`` package is very big. You should be able to get away with ``sudo apt-get install texlive texlive-latex-extra`` instead, but I haven't tested it! (`Source <http://jimmyg.org/blog/2009/sphinx-pdf-generation-with-latex.html>`_)


================================================================================
 Installing Awe from Git
================================================================================

----------------------------------------
 Download source code
----------------------------------------

Obtain a copy of the Awe source code, if you haven't already. If you are planning to make changes, it is easiest to `fork the Awe repository on GitHub <https://github.com/alberon/awe/fork>`_ first -- then use your own username in place of ``alberon`` below.

You can install Awe into any location, but ``~/awe/`` would be a logical choice and is used below.

.. code-block:: bash

    $ cd
    $ git clone git@github.com:alberon/awe.git


----------------------------------------
 Install dependencies
----------------------------------------

.. code-block:: bash

    $ cd awe
    $ npm install

This will:

- Install Node.js dependencies using npm
- Install Ruby dependencies using Bundler
- Compile the source files (from `IcedCoffeeScript <http://maxtaco.github.io/coffee-script/>`_ to JavaScript)
- Run the test suite (using `Mocha <http://visionmedia.github.io/mocha/>`_)

At this point it should be possible to run Awe by specifying the path to the executable::

    $ ~/awe/bin/awe --version


----------------------------------------
 Make it the default version (optional)
----------------------------------------

If you would like to run ``awe`` directly, instead of using the full path, you can use **one** of the following options:


a. For yourself only
....................

.. code-block:: bash

    $ export PATH="$HOME/awe/bin:$PATH"

You can make this change permanent by adding it your ``.bashrc`` file.


b. System-wide
..............

Alternatively you can install it system-wide using npm. This has the advantage of allowing you to test the manual page (``man awe``) as well, but it's best to avoid this method on a multi-user system as it will replace any other versions that are installed.

.. code-block:: bash

    $ sudo npm uninstall -g awe  # Remove currently installed version, if any
    $ sudo npm link

.. note::

    You may get the following warning messages due to npm security restrictions, but they can be ignored as long as you ran ``npm install`` above::

        npm WARN cannot run in wd awe@1.0.0 bundle install --path=ruby_bundle --binstubs=ruby_bundle/bin --deployment --without=development
        npm WARN cannot run in wd awe@1.0.0 grunt build test

To remove it later::

    $ sudo npm uninstall -g awe


----------------------------------------
 Upgrading Awe from Git
----------------------------------------

.. code-block:: bash

    $ cd ~/awe
    $ git pull
    $ npm install


----------------------------------------
 Uninstalling
----------------------------------------

If you have made it the system-wide default version, remove it as shown above -- then simply delete the source directory.

.. code-block:: bash

    $ cd
    $ sudo npm uninstall -g awe
    $ rm -rf awe


================================================================================
 Source code
================================================================================

The source code is in ``lib/``. It is written in `IcedCoffeeScript <http://maxtaco.github.io/coffee-script/>`_ -- and you will need to understand ``defer`` and ``await`` as they are used extensively.

To compile it, run::

    $ grunt lib

Alternatively, to compile everything at once (source code, documentation and man pages -- excludes PDF docs)::

    $ grunt build

Or to build everything at once and then watch for further changes and rebuild automatically (**the recommended method**)::

    $ grunt watch

This is the default command, so you can shorten it to::

    $ grunt

In each case the compiled JavaScript code is written to ``lib-build/``, and you can run the ``bin/awe`` executable script to run it.


================================================================================
 Unit tests
================================================================================

Please ensure that every important function and bug fix has corresponding unit tests, to ensure backwards-compatibility.

The unit tests are in ``test/``. They are written in regular `CoffeeScript <http://www.coffeescript.org/>`_.

To run them all::

    $ grunt test

To run a single test suite, add the filename without the extension::

    $ grunt test:AssetGroup  # -> test/AssetGroup.coffee

When you run ``grunt watch``, it will:

- Automatically run any test suite that is modified
- Run the appropriate test suite when any file in ``lib/`` is modified (e.g. when ``lib/AssetGroup.iced`` is modified, ``test/AssetGroup.coffee`` will be run)

You should manually run ``grunt test`` before committing your changes, to ensure that all tests are still passing.


.. _documentation-build:

================================================================================
 Documentation
================================================================================

Documentation is in ``docs/``. It is written in `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ and converted to HTML and PDF formats by `Sphinx <http://sphinx-doc.org/>`_.

To build the HTML docs::

    $ grunt docs

When you run ``grunt watch``, it will automatically rebuild whenever a file in ``docs/`` is modified.

.. warning::

    When using ``grunt watch``, Sphinx will only rebuild modified files. When one file references another (e.g. the table of contents), some information may be out of date. To force it to rebuild all files, run ``grunt docs`` manually.


----------------------------------------
 PDF documentation
----------------------------------------

The PDF documentation takes several seconds to generate, so it is not built automatically. To build the PDF docs::

    $ grunt pdfdocs


----------------------------------------
 Sphinx markup reference
----------------------------------------

I found the following documents useful when writing the documentation:

- `reStructuredText quick reference <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_
- `Admonitions list <http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions>`_ (``note::``, ``warning::``, etc.)
- `Code examples markups <http://sphinx-doc.org/markup/code.html>`_ (``code-block::``, ``highlight::``)
- `Other paragraph-level markup <http://sphinx-doc.org/markup/para.html>`_ (``versionadded::``, ``deprecated::``, etc.)
- `Inline markup <http://sphinx-doc.org/markup/inline.html>`_ (``:ref:``, ``:doc:``, etc.)
- `Table of contents <http://sphinx-doc.org/markup/toctree.html>`_ (``toctree::``)


----------------------------------------
 Heading styles
----------------------------------------

The following code styles are used for headings:

.. code-block:: none

    ################################################################################
     Page title (80 hashes)
    ################################################################################

    ================================================================================
     Section title (80 equals signs)
    ================================================================================

    ----------------------------------------
     Heading 2 (40 hypens)
    ----------------------------------------

    Heading 3 (full stops)
    ......................


----------------------------------------
 Custom admonitions
----------------------------------------

I found it necessary to make some custom admonitions (alert boxes) using HTML classes that are available in the `Read the Docs theme <https://github.com/snide/sphinx_rtd_theme>`_:

.. code-block:: rest

    .. admonition:: Alberon Note
        :class: note wy-alert-success

        This is a note for staff at Alberon specifically...

.. code-block:: rest

    .. admonition:: Future Plans
        :class: note

        This is something I plan to add in the future...

For other classes see the `Wyrm documentation <http://wyrmsass.org/section-2.html>`_.


================================================================================
 Updating dependencies
================================================================================

Before updating any dependencies, remember to check the changelogs to ensure they are compatible.


----------------------------------------
 Node.js
----------------------------------------

To check for updates::

    $ npm outdated

To install updates::

    $ npm update

(You will need to update the version number in ``package.json`` first to install some updates.)


----------------------------------------
 Ruby
----------------------------------------

To check for updates::

    $ bundle outdated

To update the Ruby gems to the latest version::

    $ grunt bundle

This will install the latest versions and update `Gemfile.lock`.


----------------------------------------
 Python
----------------------------------------

To check for updates::

    $ pip list --outdated --local

To upgrade a package::

    $ pip install --upgrade <name>

To save the modified versions::

    $ pip freeze > requirements.txt


================================================================================
 Releasing a new version
================================================================================

----------------------------------------
 Prepare
----------------------------------------

- Run ``git pull`` to ensure all changes are merged
- Test with ``grunt test``
- Check the documentation is up-to-date
- Update the :doc:`changelog`


----------------------------------------
 Release
----------------------------------------

- Run ``npm version X.Y.Z`` to update ``package.json``
- Run ``git push && git push --tags`` to upload the code and tag to GitHub
- Run ``npm publish`` to upload to npm


----------------------------------------
 Finalise
----------------------------------------

- Run ``sudo npm update -g awe`` to upgrade Awe on your own machine(s)

.. admonition:: Alberon Note
    :class: note wy-alert-success

    Remember to upgrade Awe on Jericho.
